from xlsx2html import xlsx2html
from bs4 import BeautifulSoup
import csv
import pprint
import html
import os

original_header = '''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
        '''

html_header = '''<?xml version="1.0" ?>
<html xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:ixt="http://www.xbrl.org/inlineXBRL/transformation/2022-02-16" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2013/inlineXBRL" xmlns:acfr="https://taxonomies.xbrl.us/grip/2022/acfr" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xbrli="http://www.xbrl.org/2003/instance" xml:lang="en-US"><head><title>Inline XBRL Sample</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/></head><body>'''

ix_header = '''<div style="display:none"><ix:header>
    <ix:references>
      <link:schemaRef xlink:href="https://taxonomies.xbrl.us/grip/2022/grip-all_2022.xsd" xlink:type="simple"></link:schemaRef>
    </ix:references>
    <ix:resources>
      <xbrli:context id="I20220630">
        <xbrli:entity>
          <xbrli:identifier scheme="https://www2.census.gov/geo/docs/reference/codes2020/national_place2020.txt">0613882</xbrli:identifier>
        </xbrli:entity>
        <xbrli:period>
          <xbrli:instant>2022-06-30</xbrli:instant>
        </xbrli:period>
      </xbrli:context>
      <xbrli:context id="I20220630_GovernmentalActivities">
        <xbrli:entity>
          <xbrli:identifier scheme="https://www2.census.gov/geo/docs/reference/codes2020/national_place2020.txt">0613882</xbrli:identifier>
          <xbrli:segment>
            <xbrldi:explicitMember dimension="acfr:TypeOfGovernmentUnitAxis">acfr:GovernmentalActivitiesMember</xbrldi:explicitMember>
          </xbrli:segment>
        </xbrli:entity>
        <xbrli:period>
          <xbrli:instant>2022-06-30</xbrli:instant>
        </xbrli:period>
      </xbrli:context>
      <xbrli:context id="I20220630_BusinessTypeActivities">
        <xbrli:entity>
          <xbrli:identifier scheme="https://www2.census.gov/geo/docs/reference/codes2020/national_place2020.txt">0613882</xbrli:identifier>
          <xbrli:segment>
            <xbrldi:explicitMember dimension="acfr:TypeOfGovernmentUnitAxis">acfr:BusinessTypeActivitiesMember</xbrldi:explicitMember>
          </xbrli:segment>
        </xbrli:entity>
        <xbrli:period>
          <xbrli:instant>2022-06-30</xbrli:instant>
        </xbrli:period>
      </xbrli:context>
      <xbrli:unit id="USD">
        <xbrli:measure>iso4217:USD</xbrli:measure>
      </xbrli:unit>
    </ix:resources>
    </ix:header>
    </div>'''

# Load lookup table between account caption names and taxonomy elements
with open('elements.csv') as f:
    next(f)  # Skip the header
    reader = csv.reader(f, skipinitialspace=True)
    elements = dict(reader)

# Use xlsx2html library to Convert Excel Worksheet to html
xlsx2html('ca_clayton_2022.xlsx', 'ca_clayton_2022.html')
xlsx2html('ca_clayton_2022.xlsx', 'ca_clayton_2022_temp.html')


# Because xlsx2html does not right align numeric values, add text-align:right clauses to style attributes for all numbers
# Also use Beautiful Soup to add Inline XBRL ix:nonFraction tags

valid_chars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', "-", ".","$"}

with open('ca_clayton_2022.html', 'r') as f:
    html = f.read()

# Get rid of header generated by the xlsx2html library
html_trunc = html.replace(original_header,'')

soup = BeautifulSoup(html_trunc, 'html.parser')

for td in soup.find_all('td'):
    if td.string is not None and td.string[0] in valid_chars:
        td['style'] = td['style'] + ';text-align:right'

names = {}

for captions in soup.find_all('td'):
    if 'A' in captions['id']:
        caption = pprint.pformat((captions.contents)).lower()[2:-2]
        try:
            names[str(captions['id'])[8:]] = elements[caption]
        except:
            pass

for table_values in soup.find_all('td'):
    if 'B' in table_values['id'] or 'C' in table_values['id'] or 'D' in table_values['id']:
        if table_values.string is not None and table_values.string[0] in valid_chars:
            if 'B' in table_values['id']:
                context = "I20220630_GovernmentalActivities"
            elif 'C' in table_values['id']:
                context = "I20220630_BusinessTypeActivities"
            elif 'D' in table_values['id']:
                context = "I20220630"
            try:
                outstring = table_values.string
                outstring_int = table_values.string
                if table_values.string[0] == "$":
                    dollar = "$"
                    outstring = table_values.string[1:]
                    outstring_int = table_values.string[1:]
                else:
                    dollar = ""
                if outstring[0] == "-":
                    minus = "-"
                    sign = ' sign="-"'
                    outstring = outstring_int[1:]
                else:
                    minus = ""
                    sign = ""
                if table_values.string == "-" or table_values.string == "$ -":
                    minus = ""
                    sign = ""
                    value = ''
                    #value = ' value="0"'  -- Arelle throwing error when I use this
                    format = 'ixt:fixed-zero'
                    outstring ="-"
                else:
                    format = 'ixt:num-dot-decimal'
                    value = ""
                name = names[str(table_values['id'])[8:]]
                id = str(table_values['id'])[7:]
                content = f'{dollar}{minus}<ix:nonFraction contextRef="{context}" name="{name}" unitRef="USD" id="{id}" decimals="0" format="{format}"{sign}{value}>' + outstring + '</ix:nonFraction>'
                table_values.string = content
            except:
                pass

html_in = soup.prettify("utf-8").decode("utf-8")

# Replace default html header tag with the one required for Inline XBRL
html_out = html_header + '\n' + ix_header + '\n'

cntr = 0

for line in html_in.splitlines():
        html_out = html_out + line + '\n'

# Add closing tags
html_out1 = html_out + '</body></html>'

# Replace escaped versions of < and > with the real versions and get rid of the string "Sheet1!" from td ids
html_out2 = html_out1.replace("&lt;","<")
html_out3 = html_out2.replace("&gt;",">")
html_out4 = html_out3.replace("Sheet1!","Sheet1_")

with open('ca_clayton_2022.html', 'w') as f:
    f.write(html_out4)

# Arelle functionality requires downloading and installing Arelle
# These commands are intended to validate and display the processed xbrl file in the Javascript viewer
os.system('"C:\\Program Files\\Arelle\\arellecmdline" --file=D:\\xlsx2ixbrl\\ca_clayton_2022.html --plugins EdgarRenderer')

# This does not work - the idea is to start Arelle's web server and then view the file in Chrome
#os.system('"C:\\Program Files\\Arelle\\arelleCmdLine" --webserver=localhost:5to check 1053')
#os.system('Start chrome /profile-directory="Default" "http://localhost:51053/1/ix.html?doc=ca_clayton_2022.html&xbrl=true?redline=true"')
